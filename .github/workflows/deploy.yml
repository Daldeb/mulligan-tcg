name: 🚀 Deploy to Production

on:
 push:
   branches: [ main ]

jobs:
 deploy:
   name: 🚀 SSH & Deploy to Server
   runs-on: ubuntu-latest

   steps:
     - name: 📥 Checkout repository
       uses: actions/checkout@v4

     - name: 🚀 SSH & Deploy to Server
       uses: appleboy/ssh-action@v1.0.3
       with:
         host: ${{ secrets.SERVER_IP }}
         username: debian
         password: ${{ secrets.SERVER_PASSWORD }}
         script: |
           echo "🔄 Resetting local repo to match origin..."
           cd /opt/tcg-hub
           sudo chown -R debian:debian /opt/tcg-hub
           chmod -R u+w /opt/tcg-hub
           git fetch origin
           git reset --hard origin/main

           echo "🔐 Vérification du fichier d'environnement persistant..."
           if [ ! -f /opt/tcg-hub-config/.env.prod ]; then
             echo "❌ ERREUR: Le fichier /opt/tcg-hub-config/.env.prod n'existe pas sur le serveur !"
             echo "Créez le fichier avec vos vraies valeurs avant le déploiement."
             exit 1
           fi

           echo "🔗 Création du lien symbolique vers le fichier de config..."
           ln -sf /opt/tcg-hub-config/.env.prod /opt/tcg-hub/.env.prod

           echo "📦 Building frontend (Vue)..."
           cd app/vuejs
           npm install
           npm run build
           cd ../../

           echo "💾 Sauvegarde de la base de données MySQL..."
           mkdir -p /opt/tcg-hub-config/backups
           NOW=$(date +"%Y%m%d_%H%M%S")
           BACKUP_FILE="/opt/tcg-hub-config/backups/mysql_backup_$NOW.sql"
           
           # Charger les variables d'environnement pour le backup
           export $(cat /opt/tcg-hub-config/.env.prod | xargs)
           docker exec tcg_prod_mysql mysqladump -u $DB_USER -p$DB_PASSWORD $DB_NAME > "$BACKUP_FILE"

           echo "🧹 Nettoyage des anciens backups (garder les 15 derniers)..."
           ls -1t /opt/tcg-hub-config/backups/mysql_backup_*.sql | tail -n +16 | xargs -r rm -f

           echo "🔗 Création des liens symboliques vers les dossiers persistants..."
           ln -sf /opt/tcg-hub-config/ssl /opt/tcg-hub/ssl 2>/dev/null || true
           ln -sf /opt/tcg-hub-config/backups /opt/tcg-hub/backups

           echo "📄 Copie de docker-compose.prod.yaml à la racine..."
           cp infrastructure/docker-compose.prod.yaml docker-compose.prod.yaml

           echo "🧹 Nettoyage dur des containers orphelins..."
           docker rm -f tcg_prod_app || true
           docker rm -f tcg_prod_mysql || true
           docker rm -f tcg_prod_redis || true
           docker rm -f tcg_prod_nginx || true
           docker rm -f tcg_prod_adminer || true

           echo "📉 Stopping and removing containers (but keeping data)..."
           docker compose -f docker-compose.prod.yaml --env-file /opt/tcg-hub-config/.env.prod down --remove-orphans

           echo "🐳 Rebuilding Docker stack..."
           docker compose -f docker-compose.prod.yaml --env-file /opt/tcg-hub-config/.env.prod up -d --build --force-recreate

           echo "🚀 Forcer le démarrage des containers en état 'Created'..."
           docker start tcg_prod_mysql || true
           docker start tcg_prod_redis || true
           docker start tcg_prod_app || true
           docker start tcg_prod_nginx || true
           docker start tcg_prod_adminer || true

           echo "⏳ Waiting for all services to be ready..."
           sleep 5

           echo "🔍 Ensuring all services are running..."
           docker compose -f docker-compose.prod.yaml --env-file /opt/tcg-hub-config/.env.prod up -d

           echo "📁 Installing Symfony dependencies..."
           docker exec tcg_prod_app composer install --no-dev --optimize-autoloader

           echo "🧹 Clearing Symfony cache..."
           docker exec tcg_prod_app php bin/console cache:clear --env=prod

           echo "🗃️ Running Doctrine migrations..."
           docker exec tcg_prod_app php bin/console doctrine:migrations:migrate --no-interaction || echo "Migration failed, but continuing..."

           echo "🔐 Securing JWT keys permissions..."
           docker exec tcg_prod_app php bin/console lexik:jwt:generate-keypair --skip-if-exists --no-passphrase
           docker exec tcg_prod_app chown -R www-data:www-data /var/www/backend/config/jwt/
           docker exec tcg_prod_app chmod 600 /var/www/backend/config/jwt/private.pem
           docker exec tcg_prod_app chmod 644 /var/www/backend/config/jwt/public.pem

           echo "📁 Setting uploads directory permissions..."
           docker exec tcg_prod_app chown -R www-data:www-data /var/www/backend/public/uploads/
           docker exec tcg_prod_app chmod -R 755 /var/www/backend/public/uploads/

           echo "✅ Deployed successfully!"